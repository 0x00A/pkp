#!/usr/bin/env node

var path = require('path')
var net = require('net')
var fs = require('fs')

var hashd = require('hashd')
var crypto = require('crypto')
var rimraf = require('rimraf')
var deepcopy = require('deepcopy')
var pkppackage = require(path.join(__dirname, '..', 'package.json'))
var args = require('optimist')
var argv = args.argv
var lib = require('../lib')

if (argv.help || argv.h) {
  var helpPath = path.join(__dirname, '..', 'help.txt')
  console.log(lib.nicetxt(fs.readFileSync(helpPath).toString()))
  process.exit(0)
}

function die(err, msg) {
  if (err) {
    console.log(err)
    process.exit(1)
  }
  else {
    if (msg) {
      console.log(msg)
    }
    process.exit(0)
  }
}

var command = argv._[0]

lib.config.get(function(err, config) {
  if (err) {
    console.log(err)
    process.exit(1)
  }
  
  switch (command) {

    //
    // generate or add existing keys to the user config
    //
    case 'keys':

      if (argv._[1] === 'create') {

        var publicOut = argv['public-out'] || path.join(process.cwd(), 'public.key')
        var privateOut = argv['private-out'] || path.join(process.cwd(), 'private.key')

        console.log('Attempting to generate keys...')

        lib.keys.create(argv, function(err, keypair) {
          if (err) {
            console.log(err)
            process.exit(1)
          }

          try {
            fs.writeFileSync(publicOut, keypair.public)
            fs.writeFileSync(privateOut, keypair.private)            
          }
          catch (ex) {
            console.log(ex)
            process.exit(1)
          }
          console.log('Successfully created %s', publicOut)
          console.log('Successfully created %s', privateOut)
        })
      }
      else if (argv._[1] === 'add') {

        if (!argv['public-in'] || !argv['private-in']) {
          var err = new Error('A `public` and `private` keys required')
          console.log(err)
          process.exit(1)
        }
        lib.keys.add(argv)
        console.log('Successfully added public and private keys')
      }

    ;break

    //
    // verify the signatures and public keys in a certificate
    //
    case 'verify':
      lib.cert.verify(argv, config, die) 
    ;break

    //
    // create a data-certificate or add a signature 
    // to an existing certificate.
    //
    case 'sign':
      lib.cert.sign(argv, config, die)
    ;break
    
    //
    // create an image form the public key in the config
    //
    case 'image':
      pngify.encodeImage(config.public, argv._[1], die)
    ;break

    //
    // add a url to the users configuration where public keys
    // can be found and verify the signer is actually the signer.
    //
    case 'url':
      lib.config.addUrl(argv._[1], die)
    ;break

    //
    // prompt for fields required in the user config
    //
    case 'config':
      lib.config.create(die)
    ;break
  }
})

